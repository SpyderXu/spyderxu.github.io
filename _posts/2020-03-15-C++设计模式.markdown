---
layout: post
title:  "C++设计模式"
date:   2020-03-15 00:03:36 +0530
categories: c++
---
一些杂记
## 生成式
### 单例

        #pragma once
        #include<iostream>
        #include<memory>
        #include<string>
        
        class Singleton {
            public:
                //lazy模式
                static std::shared_ptr<Singleton> instance() {
                    if (_instance == nullptr) {
                        _instance = std::shared_ptr<Singleton>(new Singleton());
                    }
                    return _instance;
                };
	            ~Singleton() {};
            private:
	            Singleton() {};
                //禁止拷贝复制与运算符赋值
                Singleton(Singleton&) = delete;
                Singleton& operator=(Singleton&) = delete;
                static std::shared_ptr<Singleton> _instance;
        };
### 单例2

        class Singleton {
            public:
                static std::shared_ptr<Singleton> get_instance() {
                    static Singleton _instance;
                    return std::make_shared<Singleton>(&_instance);
                }
            private:
                Singleton() {};
                Singleton& operator=(Singleton&) = delete;
                Singleton(Singleton&) = delete;
            };
### 工厂
        #pragma once
        #include<iostream>
        #include<memory>

        class baseObject {
        public:
            virtual void run() = 0;
            // base 虚析构函数
            virtual ~baseObject() {};
        };

        class Object1 : public baseObject{
        public:
            ~Object1() {
            };
            //虚函数动态绑定
            virtual void run() {
                std::cout << "object1" << std::endl;
            }
        };
        class Object2 :public baseObject {
        public:
            ~Object2() {};
            virtual void run() {
                std::cout << "object2" << std::endl;
            };
        };

        //工厂
        class ObjectFactory {
        public:
            static std::shared_ptr<baseObject> create(std::string & key) {
                if (key == "object1") {
                    return std::make_shared<Object1>(new Object1());
                }
                if (key == "object2") {
                    return std::make_shared<Object2>(new Object2());
                }
                return nullptr;
            }
        };

### 单例工厂类+注册

        #pragma once
        #include<iostream>
        #include<string>
        #include<memory>
        #include<map>
        #include<functional>

        class baseObject {
        public:
            virtual void run() = 0;
            virtual ~baseObject() {};
        };

        class Object1 :public baseObject {
        public:
            virtual void run() {
                std::cout << "object1" << std::endl;
            }
            ~Object1() {};
        };

        class Object2 :public baseObject {
        public:
            virtual void run() {
                std::cout << "object2" << std::endl;
            }
            ~Object2() {};
        };

        class objectFactory {
        public:
            std::shared_ptr<objectFactory> instance() {
                if (_instance == nullptr) {
                    _instance = std::make_shared<objectFactory>(new objectFactory());
                }
            }
            std::shared_ptr<baseObject> create(std::string& key) {
                auto it = funcs_.find(key);
                if (it == funcs_.end()) {
                    return nullptr;
                }
                else {
                    return std::make_shared<baseObject>((it->second)());
                }
            }
            void registObjectFunc(const std::string& key, std::function<baseObject*()> func) {
                funcs_[key] = func;
            }
        private:
            objectFactory() {};
            objectFactory(objectFactory&) = delete;
            objectFactory& operator=(objectFactory &) = delete;
            std::shared_ptr<objectFactory> _instance;
            std::map<std::string, std::function<baseObject*()>> funcs_;
        };

### 原型
        //原型指定创建对象的类型，通过拷贝复制构建对象。

        class protoType {
            public:
                protoType() {};
                virtual ~protoType() {};
                virtual std::shared_ptr<protoType> clone() = 0;
            };

            class concreteTypeA:public protoType {
            public:
                concreteTypeA(int member) :protoType() {
                    this->member = member;
                }
                virtual ~concreteTypeA() {};
                concreteTypeA(concreteTypeA &rhs) {
                    member = rhs.member;
                }
                virtual std::shared_ptr<protoType> clone() {
                    return std::make_shared<concreteTypeA>(new concreteTypeA(*this));
                }
            private:
                int member;
         };
### 生成器
        //通过一个包含基类的director，结合多态，指导构建的过程。
        class Builder {
            public:
                Builder() {};
                virtual ~Builder() {};
                virtual void buildA() = 0;
                virtual void buildB() = 0;
        };

        class XBuilder :public Builder {
        public:
            XBuilder() {};
            virtual ~XBuilder() {};
            virtual void buildA() {};
            virtual void buildB() {};
        };

        class YBuilder :public Builder {
        public:
            YBuilder() {};
            virtual ~YBuilder() {};
            virtual void buildA() {};
            virtual void buildB() {};
        };

        class Director {
        public:
            Director(Builder * p_builder) {
                this->p_builder = std::make_shared<Builder>(p_builder);
            };
            virtual ~Director() {};
            void construct() {
                p_builder->buildA();
                p_builder->buildB();
            }
        private:
            std::shared_ptr<Builder> p_builder;
        };